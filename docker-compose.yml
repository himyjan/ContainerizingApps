version: "3.4"

services:
  node:
    container_name: node
    build:
      context: ./node/
      dockerfile: Dockerfile
    working_dir: /usr/src/app
    volumes:
      - ./node:/usr/src/app
      - ./shared:/shared
      - /usr/src/app/node_modules
    env_file:
      - "./node/.env"
    ports:
      - 8090:3000

  angular:
    container_name: angular
    build:
      context: ./angular/
      dockerfile: Dockerfile
    working_dir: /usr/src/app
    volumes:
      - ./angular:/usr/src/app
      - ./shared:/shared
      - /usr/src/app/node_modules
    env_file:
      - "./angular/.env"
    ports:
      - 8082:3000

  react:
    container_name: react
    build:
      context: ./react/
      dockerfile: Dockerfile
    working_dir: /usr/src/app
    volumes:
      - ./react:/usr/src/app
      - ./shared:/shared
      - /usr/src/app/node_modules
    env_file:
      - "./react/.env"
    ports:
      - 8083:3000

  reacttypescript:
    container_name: reacttypescript
    build:
      context: ./reacttypescript/
      dockerfile: Dockerfile
    working_dir: /usr/src/app
    volumes:
      - ./reacttypescript:/usr/src/app
      - ./shared:/shared
      - /usr/src/app/node_modules
    env_file:
      - "./reacttypescript/.env"
    ports:
      - 8084:3000

  next:
    container_name: next
    build:
      context: ./next/
      dockerfile: Dockerfile
    working_dir: /usr/src/app
    volumes:
      - ./next:/usr/src/app
      - ./shared:/shared
      - /usr/src/app/node_modules
    env_file:
      - "./next/.env"
    ports:
      - 8085:3000

  nexttypescript:
    container_name: nexttypescript
    build:
      context: ./nexttypescript/
      dockerfile: Dockerfile
    working_dir: /usr/src/app
    volumes:
      - ./nexttypescript:/usr/src/app
      - ./shared:/shared
      - /usr/src/app/node_modules
    env_file:
      - "./nexttypescript/.env"
    ports:
      - 8086:3000
  vue:
    container_name: vue
    build:
      context: ./vue/
      dockerfile: Dockerfile
    working_dir: /usr/src/app
    volumes:
      - ./vue:/usr/src/app
      - ./shared:/shared
      - /usr/src/app/node_modules
    env_file:
      - "./vue/.env"
    ports:
      - 8087:3000

  vuetypescript:
    container_name: vuetypescript
    build:
      context: ./vuetypescript/
      dockerfile: Dockerfile
    working_dir: /usr/src/app
    volumes:
      - ./vuetypescript:/usr/src/app
      - ./shared:/shared
      - /usr/src/app/node_modules
    env_file:
      - "./vuetypescript/.env"
    ports:
      - 8088:3000

  dotnetapp:
    container_name: dotnetapp
    build:
      context: ./dotnetapp/
      dockerfile: Dockerfile
    working_dir: /usr/src/app
    volumes:
      - ./dotnetapp:/usr/src/app
      - ./shared:/shared
      - /usr/src/app

  aspnetapp:
    container_name: aspnetapp
    build:
      context: ./aspnetapp/
      dockerfile: Dockerfile
    working_dir: /usr/src/app
    volumes:
      - ./aspnetapp:/usr/src/app
      - ./shared:/shared
      - /usr/src/app

  complexapp:
    container_name: complexapp
    build:
      context: ./complexapp/
      dockerfile: Dockerfile
    working_dir: /usr/src/app
    volumes:
      - ./complexapp:/usr/src/app
      - ./shared:/shared
      - /usr/src/app

  flutterweb:
    container_name: flutterweb
    build:
      context: ./flutterweb/
      dockerfile: Dockerfile
    working_dir: /usr/src/app
    volumes:
      - ./flutterweb:/usr/src/app
      - ./shared:/shared
      - /usr/src/app
    ports:
      - 8089:3000

  blazorserver:
    container_name: blazorserver
    image: ${DOCKER_REGISTRY-}blazorserver
    build:
      context: "."
      dockerfile: ./blazorserver/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=https://+:8092
    ports:
      - 8092:8092
    volumes:
      - ~/.aspnet/https:/root/.aspnet/https:ro
      - ~/.microsoft/usersecrets:/root/.microsoft/usersecrets:ro

  blazorwasm:
    container_name: blazorwasm
    image: ${DOCKER_REGISTRY-}blazorwasm
    build:
      context: "."
      dockerfile: ./blazorwasm/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=https://+:8093
    ports:
      - 8093:8093
    volumes:
      - ~/.aspnet/https:/root/.aspnet/https:ro
      - ~/.microsoft/usersecrets:/root/.microsoft/usersecrets:ro

  mssqldb:
    container_name: mssql
    hostname: mssql
    #image: mcr.microsoft.com/mssql/server:2019-latest
    #image: mcr.microsoft.com/azure-sql-edge:latest #For ARM architecture M1
    build:
      context: ./mssqldb
      dockerfile: Dockerfile
    restart: always
    ports:
      - 1433:1433
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=YourStrong!Passw0rd
  mssqlsetup:
    container_name: mssqlsetup
    #image: mcr.microsoft.com/mssql/server:2019-latest
    image: mcr.microsoft.com/azure-sql-edge:latest #For ARM architecture M1
    depends_on:
      - mssqldb
    restart: "no"
    entrypoint: [ "bash", "-c", "sleep 10 && /init.sh" ]
    volumes:
      - ./mynetwork:/var/opt/mssql
      - ./init.sh:/init.sh
      - ./init.sql:/init.sql

  #######################################
  phpweb:
    container_name: phpweb
    image: nginx:latest
    restart: unless-stopped
    ports:
      - "${HTTP_PORT:-8080}:80"
      - "${HTTPS_PORT:-8443}:443"
    volumes:
      - ./xampp/build/nginx:/etc/nginx/conf.d
      - ${PWD}/xampp/build/index.php:/application/index.php
      - ./xampp/php:/application/php
    networks:
      dhbw:
        aliases:
          - dhbw.test
    depends_on:
      - php

  php:
    container_name: php
    build:
      context: ./xampp/build
      dockerfile: php.dockerfile
    environment:
      XDEBUG_CONFIG: remote_host=${XDEBUG_REMOTE_HOST:-host.docker.internal}
      PHP_IDE_CONFIG: "serverName=docker"
      WEBMAIL_PORT: "${WEBMAIL_PORT:-8025}"
      PHPMYADMIN_PORT: "${PHPMYADMIN_PORT:-8081}"
    volumes:
      - ${PWD}/xampp/build/index.php:/application/index.php
      - ./xampp/php:/application/php
    networks:
      - dhbw
    depends_on:
      - mariadb

  mariadb:
    container_name: mariadb
    image: mariadb:latest
    restart: unless-stopped
    ports:
      - "${DB_PORT:-8306}:3306"
    environment:
      - MYSQL_USER=root
      - MYSQL_ALLOW_EMPTY_PASSWORD=yes
    volumes:
      - ./xampp/data/mysql:/var/lib/mysql
      - ./xampp/log/mysql:/var/log/mysql
    networks:
      - dhbw

  mail:
    container_name: mail
    image: mailhog/mailhog:latest
    restart: unless-stopped
    ports:
      - "${WEBMAIL_PORT:-8025}:8025"
    networks:
      - dhbw

  phpmyadmin:
    container_name: phpmyadmin
    image: phpmyadmin/phpmyadmin:latest
    restart: unless-stopped
    ports:
      - "${PHPMYADMIN_PORT:-8081}:80"
    environment:
      - PMA_HOST=mariadb
      - PMA_USER=root
    networks:
      - dhbw
    depends_on:
      - mariadb

  ########################################### 1
  fastapi:
    container_name: fastapi
    build: ./fastapi
    command: uvicorn app.main:app --host 0.0.0.0 --port 8001
    volumes:
      - static_volume:/home/app/web/staticfiles
      - media_volume:/home/app/web/mediafiles
    expose:
      - 8001
    ports:
      - 8094:8001

  djangoweb:
    container_name: djangoweb
    build: ./django
    command: gunicorn app.wsgi:application --bind 0.0.0.0:8000
    volumes:
      - static_volume:/home/app/web/staticfiles
      - media_volume:/home/app/web/mediafiles
    expose:
      - 8000
    ports:
      - 8095:8000
    env_file:
      - ./django/.env.prod
    depends_on:
      - postgresdb

  postgresdb:
    container_name: postgresdb
    image: postgres:latest
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - ./django/.env.prod.db
    environment:
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=root
      - POSTGRES_DB=django_dev

  nginx:
    container_name: nginx
    build: ./django/nginx
    ports:
      - 80:8000
    volumes:
      - ./django/nginx:/etc/nginx/conf.d
      - static_volume:/home/app/djangoweb/staticfiles
      - media_volume:/home/app/djangoweb/mediafiles
    depends_on:
      - djangoweb

volumes:
  postgres_data:
  static_volume:
  media_volume:
    ########################################### 1

networks:
  dhbw:
    name: "${COMPOSE_PROJECT_NAME:-dhbw}"
    external: false
  mynetwork:
    driver: bridge
